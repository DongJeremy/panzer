<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="org.cloud.panzer.mapper.UserMapper">

    <resultMap type="org.cloud.panzer.domain.SysUser" id="myUserMap">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="nickname" property="nickname" />
        <result column="head_img_url" property="headImgUrl" />
        <result column="phone" property="phone" />
        <result column="telephone" property="telephone" />
        <result column="email" property="email" />
        <result column="birthday" property="birthday" />
        <result column="sex" property="sex" />
        <result column="status" property="status" />
        <result column="intro" property="intro" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <sql id="selectColumns">
        A.id,
        A.username,
        A.password,
        A.nickname,
        A.head_img_url,
        A.phone,
        A.telephone,
        A.email,
        A.birthday,
        A.sex,
        A.status,
        A.create_time,
        A.update_time
    </sql>

    <select id="selectAll" resultMap="myUserMap">
        SELECT
        <include refid="selectColumns" />
        FROM
        sys_user A
        ORDER BY A.id
    </select>

    <select id="selectAllByParams" resultMap="myUserMap">
        SELECT
        <include refid="selectColumns" />
        FROM
        sys_user A
        <where>
            1=1
            <if test="params.name != null and params.name != ''">
                AND A.name = #{params.name}
            </if>
        </where>
        ORDER BY A.id
    </select>

    <select id="selectCount" resultType="long">
        SELECT
        count(*)
        FROM
        sys_user
  </select>

    <delete id="deleteByPrimaryKey" parameterType="long">
        DELETE FROM
        sys_user
        WHERE sys_user.id=#{id}
  </delete>

    <insert id="insert" parameterType="org.cloud.panzer.domain.SysUser">
        INSERT INTO sys_user (
            id, username, password, nickname, head_img_url, phone, telephone, email, birthday, sex,
            status, create_time, update_time)
        VALUES (
            NULL,#{username}, #{password}, #{nickname}, #{headImgUrl}, #{phone}, #{telephone}, #{email}, #{birthday}, #{sex},
            #{status}, now(), now())
  </insert>

    <select id="selectByPrimaryKey" resultMap="myUserMap">
        SELECT
        <include refid="selectColumns" />
        FROM sys_user A
        <where>
            A.id=#{id}
        </where>
    </select>

    <select id="selectByUser" resultMap="myUserMap">
        SELECT
        <include refid="selectColumns" />
        FROM sys_user A
        <where>
            A.username=#{username}
        </where>
    </select>

    <update id="changePassword">
        UPDATE
        sys_user
        <set>
            password = #{password},
        </set>
        <where>
            sys_user.id=#{id}
        </where>
    </update>

    <update id="updateByPrimaryKey" parameterType="org.cloud.panzer.domain.SysUser">
        UPDATE sys_user t
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="headImgUrl != null">
                headImgUrl = #{headImgUrl},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="telephone != null">
                telephone = #{telephone},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            updateTime = #{updateTime}
        </set>
        where t.id = #{id}
    </update>

    <sql id="where">
        <where>
            <if test="params.username != null and params.username != ''">
                and t.username like concat('%', #{params.username}, '%')
            </if>
            <if test="params.nickname != null and params.nickname != ''">
                and t.nickname like concat('%', #{params.nickname}, '%')
            </if>
            <if test="params.status != null and params.status != ''">
                and t.status = #{params.status}
            </if>
        </where>
    </sql>

    <select id="count" resultType="int">
        select count(1) from sys_user t
        <include refid="where" />
    </select>

    <insert id="saveUserRoles">
        insert into sys_role_user(roleId, userId) values
        <foreach collection="roleIds" item="roleId" separator=",">
            (#{roleId}, #{userId})
        </foreach>
    </insert>

    <select id="list" resultMap="myUserMap">
        select * from sys_user t
        <include refid="where" />
        ${params.orderBy}
        limit #{offset}, #{limit}
    </select>

    <delete id="deleteUserRole" parameterType="long">
    DELETE FROM
    sys_role_user
    WHERE userId = #{userId}
  </delete>

    <select id="selectUserInfoByUsername" resultMap="myUserMap">
        SELECT
        id, username, email, nickname, sex, phone, intro
        FROM sys_user
        <where>
            username=#{username}
        </where>
    </select>

    <update id="updateUserInfoByPrimaryKey" parameterType="org.cloud.panzer.domain.SysUser">
        UPDATE sys_user
        <set>
            nickname=#{nickname},
            sex=#{sex},
            phone=#{phone},
            email=#{email},
            intro=#{intro}
        </set>
        <where>
            sys_user.id=#{id}
        </where>
    </update>

    <update id="updatePasswordByUserId">
        UPDATE sys_user
        <set>
            password = #{password},
        </set>
        <where>
            sys_user.id=#{id}
        </where>
    </update>
</mapper>